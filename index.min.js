import{useEffect as t,useState as r}from"react";function n(r,n=[]){t(()=>{const t=new AbortController,n=t.signal;return Promise.resolve(r(n)).then(async t=>{t&&"function"==typeof t&&(n.aborted&&t(),n.addEventListener("abort",t))}),()=>{n.aborted||t.abort()}},n)}function o(t,o=[]){const[e,a]=r([null,"LOADING"]);return n(async r=>{a(t=>"LOADING"===t[1]?t:[t[0],"LOADING"]);try{const n=await t(r,...o);if(r.aborted)return;a([n,"READY"])}catch(t){if(r.aborted)return;a([t,"ERROR"])}},o),e}export{o as useAsyncData,n as useAsyncEffect};
